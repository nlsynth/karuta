// SHA256
//
// See following materials for details about the algorithm
//  https://en.wikipedia.org/wiki/SHA-2
//  https://github.com/ikwzm/SECURE_HASH
//  linux/crypto/sha256_generic.c (and related files)

shared M.k #32[64] = {
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
}

func M.Ch(x, y, z #32) (#32) {
  return z ^ (x & (y ^ z))
}

func M.Maj(x, y, z #32) (#32) {
  return (x & y) | (z & (x | y))
}

func M.ror32_2(arg #32) (#32) {
  return arg[1:0] :: arg[31:2]
}

func M.ror32_6(arg #32) (#32) {
  return arg[5:0] :: arg[31:6]
}

func M.ror32_7(arg #32) (#32) {
  return arg[6:0] :: arg[31:7]
}

func M.ror32_11(arg #32) (#32) {
  return arg[10:0] :: arg[31:11]
}

func M.ror32_13(arg #32) (#32) {
  return arg[12:0] :: arg[31:13]
}

func M.ror32_17(arg #32) (#32) {
  return arg[16:0] :: arg[31:17]
}

func M.ror32_18(arg #32) (#32) {
  return arg[17:0] :: arg[31:18]
}

func M.ror32_19(arg #32) (#32) {
  return arg[18:0] :: arg[31:19]
}

func M.ror32_22(arg #32) (#32) {
  return arg[21:0] :: arg[31:22]
}

func M.ror32_25(arg #32) (#32) {
  return arg[24:0] :: arg[31:25]
}

func M.e0(x #32) (#32) {
  return ror32_2(x) ^ ror32_13(x) ^ ror32_22(x)
}

func M.e1(x #32) (#32) {
  return ror32_6(x) ^ ror32_11(x) ^ ror32_25(x)
}

func M.s0(x #32) (#32) {
  return ror32_7(x) ^ ror32_18(x) ^ (x >> 3)
}

func M.s1(x #32) (#32) {
  return ror32_17(x) ^ ror32_19(x) ^ (x >> 10)
}

shared M.W #32[64]
shared M.state #32[8]
@axi_master
shared M.buf #32[16]

func M.init() {
  state[0] = 0x6a09e667
  state[1] = 0xbb67ae85
  state[2] = 0x3c6ef372
  state[3] = 0xa54ff53a
  state[4] = 0x510e527f
  state[5] = 0x9b05688c
  state[6] = 0x1f83d9ab
  state[7] = 0x5be0cd19
}

func M.iterate(a, b, c, d, e, f, g, h, idx #32) (#32, #32, #32, #32, #32, #32, #32, #32) {
  var t1, t2 #32
  t1 = h + e1(e) + Ch(e,f,g) + k[idx] + W[idx]
  t2 = e0(a) + Maj(a,b,c);    d+=t1;    h=t1+t2;
  t1 = g + e1(d) + Ch(d,e,f) + k[idx + 1] + W[idx + 1];
  t2 = e0(h) + Maj(h,a,b);    c+=t1;    g=t1+t2;
  t1 = f + e1(c) + Ch(c,d,e) + k[idx + 2] + W[idx + 2];
  t2 = e0(g) + Maj(g,h,a);    b+=t1;    f=t1+t2;
  t1 = e + e1(b) + Ch(b,c,d) + k[idx + 3] + W[idx + 3];
  t2 = e0(f) + Maj(f,g,h);    a+=t1;    e=t1+t2;
  t1 = d + e1(a) + Ch(a,b,c) + k[idx + 4] + W[idx + 4];
  t2 = e0(e) + Maj(e,f,g);    h+=t1;    d=t1+t2;
  t1 = c + e1(h) + Ch(h,a,b) + k[idx + 5] + W[idx + 5];
  t2 = e0(d) + Maj(d,e,f);    g+=t1;    c=t1+t2;
  t1 = b + e1(g) + Ch(g,h,a) + k[idx + 6] + W[idx + 6];
  t2 = e0(c) + Maj(c,d,e);    f+=t1;    b=t1+t2;
  t1 = a + e1(f) + Ch(f,g,h) + k[idx + 7] + W[idx + 7];
  t2 = e0(b) + Maj(b,c,d);    e+=t1;    a=t1+t2;
  return a, b, c, d, e, f, g, h
}

func M.bswap(arg #32) (#32) {
  return arg[7:0] :: arg[15:8] :: arg[23:16] :: arg[31:24]
}

func M.transform() {
  var i #32
  for i = 0; i < 16; i++ {
    W[i] = bswap(buf[i])
  }
  for i = 16; i < 64; i++ {
    W[i] = s1(W[i-2]) + W[i-7] + s0(W[i-15]) + W[i-16];
  }
  var a, b, c, d, e, f, g, h #32
  a=state[0];  b=state[1];  c=state[2];  d=state[3];
  e=state[4];  f=state[5];  g=state[6];  h=state[7];

  for i = 0; i < 64; i += 8 {
    (a, b, c, d, e, f, g, h) = iterate(a, b, c, d, e, f, g, h, i)
  }

  state[0] += a; state[1] += b; state[2] += c; state[3] += d;
  state[4] += e; state[5] += f; state[6] += g; state[7] += h;
}

@ext_entry
func M.sha256(addr, blocks #32) (#256) {
  init()
  var i int
  for i = 0; i < blocks; ++i {
    buf.load(addr, 16, 0)
    transform()
    addr += 64
  }
  return state[0] :: state[1] :: state[2] :: state[3] :: state[4] :: state[5] :: state[6] :: state[7]
}

M.compile()
M.writeHdl("/tmp/a.v")
M.writeHdl("/tmp/a.html")
M.writeHdl("/tmp/a.iroha")

print(M.sha256(0, 0))

// sha256("")
// e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
Memory.write(0, 1 << 7)  // '1' after the empty message.
print(M.sha256(0, 1))
