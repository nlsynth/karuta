// Additional member definitions.
// This file is loaded before the user's files, so the modifications to Kernel
// are cloned to file objects and visible in them.
// Some members have __ prefix so that users can overwrite the original one.
print("default-isynth.karuta loaded")

// Alias for convenience
shared Kernel.M object = Kernel

// SSA is exprimental for now.
shared Kernel._use_ssa bool = false

func Kernel.setName(s object) {
  setSynthParam("name", s)
}

func Kernel.compile() {
  __compile()
  if _use_ssa {
    __compile("clean,unroll,ssa_convert,phi_cleaner,pipeline,clean")
  } else {
    __compile("clean,unroll,pipeline,alloc_resource,clean")
  }
}

@embed(resource = "wait_cycles",
 verilog = "karuta_wait.v",
 file= "copy",
 module= "wait_cycles")
func Kernel.__wait(cycles int) {
}

@embed(resource = "exit",
 verilog = "karuta_exit.v",
 file = "copy",
 module = "karuta_exit")
func Kernel.__exit() {
}

// Save this to create a vanilla object.
shared Kernel.Kernel_ object = Kernel.clone()

func Array.load(maddr #64, len #32, aaddr #32) {
  axiLoad(maddr, len - 1, aaddr)
}

func Array.store(maddr #64, len #32, aaddr #32) {
  axiStore(maddr, len - 1, aaddr)
}
