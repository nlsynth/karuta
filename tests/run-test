#! /usr/bin/python3

# Copyright Yusuke Tabata 2007-2020


import os
import re
import sys
import tempfile

import karuta_test
import test_files

print("Running tests")
os.putenv("KARUTA_DIR", "../lib/")

class TestSummary():
    def __init__(self):
        self.total_failures = 0
        self.total_unexpected_aborts = 0
        self.num_tests = 0
        self.num_vl_tests = 0
        self.num_aborts = 0
        self.num_verilog_compile_errors = 0
        self.failed_tests = []
        self.aborted_tests = []

    def PrintSummary(self):
        print("Number of verilog tests:%d" % self.num_vl_tests)
        print("Number of tests:%d" % self.num_tests)
        print("Number of aborted tests:%d" % self.num_aborts)
        print("Number of unexpectedly aborted tests:%d" %
              self.total_unexpected_aborts)
        print("Number of verilog compile failures:%d" %
              self.num_verilog_compile_errors)
        print("Total unexpected Failures:%d" % self.total_failures)
        if self.failed_tests:
            print(self.failed_tests)
        if self.aborted_tests:
            print("aborted tests:" + str(self.aborted_tests))

    def AddResult(self, test_name, num_fails, ign_fail,
                  done_stat, exp_abort, exp_fails):
        if num_fails != exp_fails and (not ign_fail):
            print("Unexpected fails %d (exp%d)" % (num_fails, exp_fails))
            self.total_failures += num_fails
            self.failed_tests.append(test_name)
        if not done_stat and not exp_abort:
            print("Unexpected abort")
            self.total_unexpected_aborts += 1
            self.aborted_tests.append(test_name)
        self.num_tests += 1

    def AddVerilogResult(self, test_name, num_fails, ign_fail, exp_fails):
        self.num_vl_tests += 1
        if num_fails != exp_fails and (not ign_fail):
            print("unexpected failure in vlfile")
            self.total_failures += num_fails
            self.failed_tests.append(test_name)

    def AddVerilogCompileFailure(self, test_name):
        self.num_verilog_compile_errors += 1
        self.failed_tests.append(test_name)

    def AddAbort(self, rv):
        self.num_aborts += 1;


class TestManager:
    def __init__(self, sources):
        self.sources = sources

    def IsCompoundTest(self, source):
        ifh = open(source, "r")
        for line in ifh:
            if re.search("KARUTA_COMPOUND_TEST", line):
                return True
        return False

    def SplitTest(self, source):
        files = []
        ifh = open(source, "r")
        of = tempfile.mktemp()
        ofh = open(of, "w")
        ln = 0
        lnstr = ""
        for line in ifh:
            ln = ln + 1
            lnstr = "\n// KARUTA_SPLIT_TEST: " + source + ":" + str(ln) + "\n"
            if re.search("KARUTA_NEXT_TEST", line):
                files.append(of)
                ofh.write(lnstr)
                ofh.close()
                of = tempfile.mktemp()
                ofh = open(of, "w")
            else:
                ofh.write(line)
        files.append(of)
        ofh.write(lnstr)
        ofh.close()
        return files

    def Run(self):
        summary = TestSummary()
        for source in self.sources:
            if self.IsCompoundTest(source):
                tests = self.SplitTest(source)
                print (" Split into " + str(len(tests)) + "compound tests" +
                       " from " + source)
                for fract in tests:
                    t = karuta_test.KarutaTest(fract)
                    t.RunTest(summary)
                    os.unlink(fract)
            else:
                t = karuta_test.KarutaTest(source)
                t.RunTest(summary)
        summary.PrintSummary()

test_sources = []

if len(sys.argv) > 1:
    args = sys.argv[1:]
    while len(args) > 0:
        arg = args[0]
        args = args[1:]
        if arg == "--iroha_binary":
            karuta_test.iroha_binary = args[0]
            args = args[1:]
            continue
        if arg == "--synth":
            karuta_test.with_synth_test = True
            continue
        if arg == "--verilator":
            karuta_test.with_verilator_test = True
            continue
        test_sources.append(arg)

if not test_sources:
    test_sources = test_files.default_tests

tm = TestManager(test_sources)
tm.Run()
